// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model HarvestLog {
  id Int  @id @default(autoincrement()) 
  areaId Int @map("area_id")
  quantity Decimal
  harvestDate DateTime @map("harvest_date") @default(now()) 
  area Area @relation(fields: [areaId], references: [id])
  stock Stock[]
}
model Area {
  id Int @id @default(autoincrement())
  description String
  harvestLog HarvestLog[]
}
model Grade{
  id Int @id @default(autoincrement()) 
  description String 
  price Float
  inventories Inventory[]
  stocks Stock[]
}

model Inventory{
  id Int @id @default(autoincrement())
  gradeId Int @map("grade_id")
  grade Grade @relation(fields: [gradeId], references: [id])
  isWashed Boolean @map("is_washed")
  quantity Decimal
  
}

model Stock{
  id Int @id @default(autoincrement()) 
  quantityOnHand Decimal @map("quantity_on_hand")
  gradeId Int @map("grade_id")

  batchId Int @map("batch_id")
  harvestLog HarvestLog @relation(fields:[batchId], references: [id])
  grade Grade @relation(fields: [gradeId], references: [id])
  
  stockOut Stockout[]
  orderDetail OrderDetail[]
}
model Stockout {
  id Int @id @default(autoincrement())
  stockId Int @map("stock_id")
  quantity Decimal
  stockoutType String @map("stock_out_type")
  dateOut DateTime @default(now()) @map("date_out")
  stock Stock @relation(fields: [stockId], references: [id])
}

model OrderDetail{
  id Int @id @default(autoincrement()) 
  orderId Int  @map("order_id")
  stockId Int @map("stock_id")
  isFulfilled Boolean @map("is_fullfilled")
  orderQuantity Int @map("order_quantity")
  subTotal Float @map("sub_total")
  loadingSchedule DateTime? @map("loading_schedule")
  status StatusEnum @default(processing)
  stock Stock @relation(fields: [stockId], references: [id])
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Order {
  id Int @id @default(autoincrement()) 
  customerId Int @map("customer_id")
  isPreorder Boolean  @map("is_preorder")
  orderDate DateTime @default(now()) @map("order_date")
  orderTotal Decimal @map("order_total")
  isFulfilled Boolean @map("is_fulfilled")
  orderDetails OrderDetail[]
  customer Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}
model Customer{
  id Int @id @default(autoincrement()) 
  name String 
  mobileNumber String @map("mobile_number")
  email String 
  orders Order[]
}

model Personnel{
  id String @id
  name String
  password String
  actions ActionLog[]
}

model ActionLog{
  id Int @id @default(autoincrement())
  personnelId String @map("personnel_id")
  venue Venue
  event Event
  actionDate DateTime @default(now()) @map("action_date")
  personnel Personnel @relation(fields: [personnelId], references: [id])
}


enum Event {
  add
  update
  delete
}
enum Venue{
  add_inventory
  category
  records
  order_details
  action_log
}
enum StatusEnum {
  processing 
  packed
  scheduled_for_loading
  fullfilled
}